{
  
    
        "post0": {
            "title": "Beer Detector",
            "content": "App Description . I built a computer vision app to recognize 12 kinds of beer using fastai. This is project is based on chapter 2 of Jeremy Howard&#39;s Deep Learning book and lesson 2 of the Deep Learning course v4. . . The app) is now running on heroku and works best on mobile phones. I&#39;m using the free heroku service so it can take 30 seconds or so to load. . from fastbook import * from fastai.vision.widgets import * . Collecting Data . The first step is downloading Images from Bing with Azure API. I signed up for a Microsoft Azure account to get an API key to search Bing. . import yaml key = yaml.safe_load(open(&#39;key.yaml&#39;))[&#39;AZURE_SEARCH_KEY&#39;] . I picked 12 beers for my app to recognize . beer_types = &#39;toppling goliath pompeii&#39;,&#39;toppling goliath pseudo sue&#39;,&#39;surly furious&#39;, &#39;busch light&#39;, &#39;bells two hearted&#39;, &#39;toppling goliath king sue&#39;, &#39;founders kentucky breakfast stout&#39;, &#39;unibroue la fin du monde&#39;, &#39;bells hopslam&#39;, &#39;dogfish head 60 minute ipa&#39;, &#39;founders solid gold&#39;, &#39;founders all day ipa&#39; . I looped through the 12 beers and used fastai&#39;s search_images_bing function to download 150 . path = Path(&#39;beers&#39;) if not path.exists(): path.mkdir() for o in beer_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o} beer&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . fns = get_image_files(path) fns . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . Loading the data into a fastai datablock . beers = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = beers.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . beers = beers.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = beers.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . bears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;)) dls = bears.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . bears = bears.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = bears.dataloaders(path) dls.train.show_batch(max_n=4, nrows=1, unique=True) . Data Augmentation . beers = beers.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = beers.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . Training Your Model, and Using It to Clean Your Data . beers = beers.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = beers.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.787518 | 0.794502 | 0.218391 | 00:15 | . epoch train_loss valid_loss error_rate time . 0 | 0.866057 | 0.368824 | 0.099617 | 00:18 | . 1 | 0.597279 | 0.193733 | 0.042146 | 00:19 | . 2 | 0.417497 | 0.175624 | 0.045977 | 00:18 | . 3 | 0.322531 | 0.175689 | 0.042146 | 00:19 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix(figsize=[10,10]) . cleaner = ImageClassifierCleaner(learn) cleaner . NameError Traceback (most recent call last) &lt;ipython-input-15-1df86057f98d&gt; in &lt;module&gt; -&gt; 1 cleaner = ImageClassifierCleaner(learn) 2 cleaner NameError: name &#39;learn&#39; is not defined . for idx in cleaner.delete(): cleaner.fns[idx].unlink() for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . FileNotFoundError Traceback (most recent call last) &lt;ipython-input-61-bb2fe04ddcb9&gt; in &lt;module&gt; -&gt; 1 for idx in cleaner.delete(): cleaner.fns[idx].unlink() 2 for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) /opt/conda/envs/fastai/lib/python3.8/pathlib.py in unlink(self, missing_ok) 1322 self._raise_closed() 1323 try: -&gt; 1324 self._accessor.unlink(self) 1325 except FileNotFoundError: 1326 if not missing_ok: FileNotFoundError: [Errno 2] No such file or directory: &#39;beers/founders solid gold/00000065.jpg&#39; . interp.plot_top_losses(5, nrows=1) . cleaner = ImageClassifierCleaner(learn) cleaner . Turning Your Model into an Online Application . Using the Model for Inference . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;images/grizzly.jpg&#39;) . (&#39;toppling goliath pseudo sue&#39;, tensor(6), tensor([2.2459e-03, 4.9390e-03, 1.4955e-02, 4.9468e-04, 8.0316e-03, 2.5601e-02, 9.4373e-01])) . learn_inf.dls.vocab . [&#39;bells two hearted&#39;, &#39;busch light&#39;, &#39;founders kentucky breakfast stout&#39;, &#39;surly furious&#39;, &#39;toppling goliath king sue&#39;, &#39;toppling goliath pompeii&#39;, &#39;toppling goliath pseudo sue&#39;] . Creating a Notebook App from the Model . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred.title()}; Probability: {100*probs[pred_idx]:.01f}%&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . Turning Your Notebook into a Real App .",
            "url": "https://mattlichti.github.io/blog/jupyter/2021/02/25/beer-detector.html",
            "relUrl": "/jupyter/2021/02/25/beer-detector.html",
            "date": " • Feb 25, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Beer Detector",
            "content": "clean . To download images with Bing Image Search, sign up at Microsoft Azure for a free account. You will be given a key, which you can copy and enter in a cell as follows (replacing &#39;XXX&#39; with your key and executing it): . key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;your_key&#39;) . NameError Traceback (most recent call last) &lt;ipython-input-1-09661d245b66&gt; in &lt;module&gt; -&gt; 1 key = os.environ.get(&#39;AZURE_SEARCH_KEY&#39;, &#39;your_key&#39;) NameError: name &#39;os&#39; is not defined . search_images_bing . &lt;function fastbook.search_images_bing(key, term, min_sz=128)&gt; . # from azure.cognitiveservices.search.imagesearch import ImageSearchClient as api # from msrest.authentication import CognitiveServicesCredentials as auth def search_images_bing(key, term, min_sz=128, max_images=150): params = {&#39;q&#39;:term, &#39;count&#39;:max_images, &#39;min_height&#39;:min_sz, &#39;min_width&#39;:min_sz} headers = {&quot;Ocp-Apim-Subscription-Key&quot;:key} search_url = &quot;https://api.bing.microsoft.com/v7.0/images/search&quot; response = requests.get(search_url, headers=headers, params=params) response.raise_for_status() search_results = response.json() return L(search_results[&#39;value&#39;]) . results = search_images_bing(key, &#39;grizzly bear&#39;) ims = results.attrgot(&#39;webSearchUrl&#39;) len(ims) . 150 . ims . (#150) [&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=4B18E005DE8D44734820DCB3533255E2AD9FB657&amp;simid=608031189268562943&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=D573F19FF4DF8AFCDE7B0FF9490C80FD014F7636&amp;simid=608016410315918873&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=237B29519663707F34818E0C03CC8743C52C2460&amp;simid=608048274675139707&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=1AE3FCE66B4BF849F12804F61C3240432217B7D7&amp;simid=608052036991125050&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=8F946D24D48B6689B06FA85DF0475816A248EB57&amp;simid=608036553700411199&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=91EC5A8AD8C4C7C891B76A34A6DCF1BF07420D56&amp;simid=608028753992222912&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=7AD5827F5FD938B0D5F99A20F989CF36966AE8A3&amp;simid=608042004047724937&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=B73F5D5B4D63B4C008E412DE4EBAC40012F4AB88&amp;simid=608052384892848385&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=BA35904A89858132DA87E478EDCA08C6F8C8FB53&amp;simid=607986397069445995&#39;,&#39;https://www.bing.com/images/search?view=detailv2&amp;FORM=OIIRPO&amp;q=grizzly+bear&amp;id=85489993FDE96C3A3505E9CBFAF9C8E38DAAC1BE&amp;simid=608049395651445038&#39;...] . dest = &#39;images/grizzly.jpg&#39; download_url(ims[0], dest) . im = Image.open(dest) im.to_thumb(128,128) . beer_types = &#39;toppling goliath pompeii&#39;,&#39;toppling goliath pseudo sue&#39;,&#39;surly furious&#39; path = Path(&#39;beers&#39;) . if not path.exists(): path.mkdir() for o in beer_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_bing(key, f&#39;{o} beer&#39;) download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . # for o in beer_types: # dest = (path/o) # dest.mkdir(exist_ok=True) # results = search_images_bing(key, f&#39;{o} beer&#39;) # download_images(dest, urls=results.attrgot(&#39;contentUrl&#39;)) . path = Path(&#39;beers&#39;) beer_types = &#39;toppling goliath pompeii&#39;,&#39;toppling goliath pseudo sue&#39;,&#39;surly furious&#39;, &#39;busch light&#39;, &#39;bells two hearted&#39;, &#39;toppling goliath king sue&#39;, &#39;founders kentucky breakfast stout&#39; beer_types . (&#39;toppling goliath pompeii&#39;, &#39;toppling goliath pseudo sue&#39;, &#39;surly furious&#39;, &#39;busch light&#39;, &#39;bells two hearted&#39;, &#39;toppling goliath king sue&#39;, &#39;founders kentucky breakfast stout&#39;) . fns = get_image_files(path) fns . (#750) [Path(&#39;beers/founders kentucky breakfast stout/00000047.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000055.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000107.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000030.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000061.jpeg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000148.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000110.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000029.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000112.jpg&#39;),Path(&#39;beers/founders kentucky breakfast stout/00000091.jpg&#39;)...] . len([i for i in fns]) . 751 . failed = verify_images(fns) failed . (#0) [] . failed.map(Path.unlink); . Sidebar: Getting Help in Jupyter Notebooks . End sidebar . From Data to DataLoaders . beers = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = beers.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . beers = beers.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = beers.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . bears = bears.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;)) dls = bears.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . bears = bears.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = bears.dataloaders(path) dls.train.show_batch(max_n=4, nrows=1, unique=True) . Data Augmentation . beers = beers.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = beers.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . Training Your Model, and Using It to Clean Your Data . beers = beers.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = beers.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.399717 | 0.986212 | 0.346667 | 00:10 | . epoch train_loss valid_loss error_rate time . 0 | 0.708531 | 0.301710 | 0.086667 | 00:11 | . 1 | 0.538836 | 0.165984 | 0.040000 | 00:12 | . 2 | 0.400163 | 0.145964 | 0.046667 | 00:12 | . 3 | 0.311032 | 0.142816 | 0.040000 | 00:12 | . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 2.475560 | 0.905999 | 0.280220 | 00:12 | . epoch train_loss valid_loss error_rate time . 0 | 1.184511 | 0.515055 | 0.153846 | 00:14 | . 1 | 0.991068 | 0.486007 | 0.148352 | 00:13 | . 2 | 0.804817 | 0.474160 | 0.170330 | 00:15 | . 3 | 0.691379 | 0.473916 | 0.170330 | 00:14 | . Me . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix(figsize=[10,10]) . cleaner = ImageClassifierCleaner(learn) cleaner . _RemoteTraceback Traceback (most recent call last) _RemoteTraceback: &#34;&#34;&#34; Traceback (most recent call last): File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 239, in _process_worker r = call_item.fn(*call_item.args, **call_item.kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in _process_chunk return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in &lt;listcomp&gt; return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py&#34;, line 54, in _call return g(item) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py&#34;, line 41, in _open_thumb def _open_thumb(fn, h, w): return Image.open(fn).to_thumb(h, w).convert(&#39;RGBA&#39;) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py&#34;, line 2891, in open fp = builtins.open(filename, &#34;rb&#34;) FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000114.jpg&#39; &#34;&#34;&#34; The above exception was the direct cause of the following exception: FileNotFoundError Traceback (most recent call last) /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in _handle_msg(self, msg) 674 if &#39;buffer_paths&#39; in data: 675 _put_buffers(state, data[&#39;buffer_paths&#39;], msg[&#39;buffers&#39;]) --&gt; 676 self.set_state(state) 677 678 # Handle a state request. /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in set_state(self, sync_data) 543 from_json = self.trait_metadata(name, &#39;from_json&#39;, 544 self._trait_from_json) --&gt; 545 self.set_trait(name, from_json(sync_data[name], self)) 546 547 def send(self, content, buffers=None): /opt/conda/envs/fastai/lib/python3.8/contextlib.py in __exit__(self, type, value, traceback) 118 if type is None: 119 try: --&gt; 120 next(self.gen) 121 except StopIteration: 122 return False /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in hold_trait_notifications(self) 1212 for changes in cache.values(): 1213 for change in changes: -&gt; 1214 self.notify_change(change) 1215 1216 def _notify_trait(self, name, old_value, new_value): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget_selection.py in _propagate_index(self, change) 233 self.label = label 234 if self.value is not value: --&gt; 235 self.value = value 236 237 @validate(&#39;value&#39;) /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in __set__(self, obj, value) 602 raise TraitError(&#39;The &#34;%s&#34; trait is read-only.&#39; % self.name) 603 else: --&gt; 604 self.set(obj, value) 605 606 def _validate(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in set(self, obj, value) 591 # we explicitly compare silent to True just in case the equality 592 # comparison above returns something other than True/False --&gt; 593 obj._notify_trait(self.name, old_value, new_value) 594 595 def __set__(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_trait(self, name, old_value, new_value) 1215 1216 def _notify_trait(self, name, old_value, new_value): -&gt; 1217 self.notify_change(Bunch( 1218 name=name, 1219 old=old_value, /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in on_change_ds(self, change) 88 def on_change_ds(self, change=None): 89 info = L(o for o in self.iwis[self.dd_ds.index] if o[1]==self.dd_cats.value) &gt; 90 self.iw.set_fns(info.sorted(2, reverse=True).itemgot(0)) /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in set_fns(self, fns) 51 def set_fns(self, fns): 52 self.fns = L(fns)[:self.max_n] &gt; 53 ims = parallel(_open_thumb, self.fns, h=self.height, w=self.width, progress=False, 54 n_workers=min(len(self.fns)//10,defaults.cpus)) 55 self.widget.children = [VBox([widget(im, height=f&#39;{self.height}px&#39;), Dropdown( /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py in parallel(f, items, n_workers, total, progress, pause, threadpool, timeout, chunksize, *args, **kwargs) 104 if total is None: total = len(items) 105 r = progress_bar(r, total=total, leave=False) --&gt; 106 return L(r) 107 108 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __call__(cls, x, *args, **kwargs) 95 def __call__(cls, x=None, *args, **kwargs): 96 if not args and not kwargs and x is not None and isinstance(x,cls): return x &gt; 97 return super().__call__(x, *args, **kwargs) 98 99 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __init__(self, items, use_list, match, *rest) 103 def __init__(self, items=None, *rest, use_list=False, match=None): 104 if (use_list is not None) or not is_array(items): --&gt; 105 items = listify(items, *rest, use_list=use_list, match=match) 106 super().__init__(items) 107 /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/basics.py in listify(o, use_list, match, *rest) 54 elif isinstance(o, list): res = o 55 elif isinstance(o, str) or is_array(o): res = [o] &gt; 56 elif is_iter(o): res = list(o) 57 else: res = [o] 58 if match is not None: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py in _chain_from_iterable_of_lists(iterable) 482 careful not to keep references to yielded objects. 483 &#34;&#34;&#34; --&gt; 484 for element in iterable: 485 element.reverse() 486 while element: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result_iterator() 609 # Careful not to keep a reference to the popped future 610 if timeout is None: --&gt; 611 yield fs.pop().result() 612 else: 613 yield fs.pop().result(end_time - time.monotonic()) /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result(self, timeout) 437 raise CancelledError() 438 elif self._state == FINISHED: --&gt; 439 return self.__get_result() 440 else: 441 raise TimeoutError() /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in __get_result(self) 386 def __get_result(self): 387 if self._exception: --&gt; 388 raise self._exception 389 else: 390 return self._result FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000114.jpg&#39; . _RemoteTraceback Traceback (most recent call last) _RemoteTraceback: &#34;&#34;&#34; Traceback (most recent call last): File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 239, in _process_worker r = call_item.fn(*call_item.args, **call_item.kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in _process_chunk return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in &lt;listcomp&gt; return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py&#34;, line 54, in _call return g(item) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py&#34;, line 41, in _open_thumb def _open_thumb(fn, h, w): return Image.open(fn).to_thumb(h, w).convert(&#39;RGBA&#39;) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py&#34;, line 2891, in open fp = builtins.open(filename, &#34;rb&#34;) FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000130.jpg&#39; &#34;&#34;&#34; The above exception was the direct cause of the following exception: FileNotFoundError Traceback (most recent call last) /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in _handle_msg(self, msg) 674 if &#39;buffer_paths&#39; in data: 675 _put_buffers(state, data[&#39;buffer_paths&#39;], msg[&#39;buffers&#39;]) --&gt; 676 self.set_state(state) 677 678 # Handle a state request. /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in set_state(self, sync_data) 543 from_json = self.trait_metadata(name, &#39;from_json&#39;, 544 self._trait_from_json) --&gt; 545 self.set_trait(name, from_json(sync_data[name], self)) 546 547 def send(self, content, buffers=None): /opt/conda/envs/fastai/lib/python3.8/contextlib.py in __exit__(self, type, value, traceback) 118 if type is None: 119 try: --&gt; 120 next(self.gen) 121 except StopIteration: 122 return False /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in hold_trait_notifications(self) 1212 for changes in cache.values(): 1213 for change in changes: -&gt; 1214 self.notify_change(change) 1215 1216 def _notify_trait(self, name, old_value, new_value): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget_selection.py in _propagate_index(self, change) 233 self.label = label 234 if self.value is not value: --&gt; 235 self.value = value 236 237 @validate(&#39;value&#39;) /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in __set__(self, obj, value) 602 raise TraitError(&#39;The &#34;%s&#34; trait is read-only.&#39; % self.name) 603 else: --&gt; 604 self.set(obj, value) 605 606 def _validate(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in set(self, obj, value) 591 # we explicitly compare silent to True just in case the equality 592 # comparison above returns something other than True/False --&gt; 593 obj._notify_trait(self.name, old_value, new_value) 594 595 def __set__(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_trait(self, name, old_value, new_value) 1215 1216 def _notify_trait(self, name, old_value, new_value): -&gt; 1217 self.notify_change(Bunch( 1218 name=name, 1219 old=old_value, /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in on_change_ds(self, change) 88 def on_change_ds(self, change=None): 89 info = L(o for o in self.iwis[self.dd_ds.index] if o[1]==self.dd_cats.value) &gt; 90 self.iw.set_fns(info.sorted(2, reverse=True).itemgot(0)) /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in set_fns(self, fns) 51 def set_fns(self, fns): 52 self.fns = L(fns)[:self.max_n] &gt; 53 ims = parallel(_open_thumb, self.fns, h=self.height, w=self.width, progress=False, 54 n_workers=min(len(self.fns)//10,defaults.cpus)) 55 self.widget.children = [VBox([widget(im, height=f&#39;{self.height}px&#39;), Dropdown( /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py in parallel(f, items, n_workers, total, progress, pause, threadpool, timeout, chunksize, *args, **kwargs) 104 if total is None: total = len(items) 105 r = progress_bar(r, total=total, leave=False) --&gt; 106 return L(r) 107 108 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __call__(cls, x, *args, **kwargs) 95 def __call__(cls, x=None, *args, **kwargs): 96 if not args and not kwargs and x is not None and isinstance(x,cls): return x &gt; 97 return super().__call__(x, *args, **kwargs) 98 99 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __init__(self, items, use_list, match, *rest) 103 def __init__(self, items=None, *rest, use_list=False, match=None): 104 if (use_list is not None) or not is_array(items): --&gt; 105 items = listify(items, *rest, use_list=use_list, match=match) 106 super().__init__(items) 107 /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/basics.py in listify(o, use_list, match, *rest) 54 elif isinstance(o, list): res = o 55 elif isinstance(o, str) or is_array(o): res = [o] &gt; 56 elif is_iter(o): res = list(o) 57 else: res = [o] 58 if match is not None: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py in _chain_from_iterable_of_lists(iterable) 482 careful not to keep references to yielded objects. 483 &#34;&#34;&#34; --&gt; 484 for element in iterable: 485 element.reverse() 486 while element: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result_iterator() 609 # Careful not to keep a reference to the popped future 610 if timeout is None: --&gt; 611 yield fs.pop().result() 612 else: 613 yield fs.pop().result(end_time - time.monotonic()) /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result(self, timeout) 430 raise CancelledError() 431 elif self._state == FINISHED: --&gt; 432 return self.__get_result() 433 434 self._condition.wait(timeout) /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in __get_result(self) 386 def __get_result(self): 387 if self._exception: --&gt; 388 raise self._exception 389 else: 390 return self._result FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000130.jpg&#39; . _RemoteTraceback Traceback (most recent call last) _RemoteTraceback: &#34;&#34;&#34; Traceback (most recent call last): File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 239, in _process_worker r = call_item.fn(*call_item.args, **call_item.kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in _process_chunk return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in &lt;listcomp&gt; return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py&#34;, line 54, in _call return g(item) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py&#34;, line 41, in _open_thumb def _open_thumb(fn, h, w): return Image.open(fn).to_thumb(h, w).convert(&#39;RGBA&#39;) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py&#34;, line 2891, in open fp = builtins.open(filename, &#34;rb&#34;) FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000130.jpg&#39; &#34;&#34;&#34; The above exception was the direct cause of the following exception: FileNotFoundError Traceback (most recent call last) /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in _handle_msg(self, msg) 674 if &#39;buffer_paths&#39; in data: 675 _put_buffers(state, data[&#39;buffer_paths&#39;], msg[&#39;buffers&#39;]) --&gt; 676 self.set_state(state) 677 678 # Handle a state request. /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in set_state(self, sync_data) 543 from_json = self.trait_metadata(name, &#39;from_json&#39;, 544 self._trait_from_json) --&gt; 545 self.set_trait(name, from_json(sync_data[name], self)) 546 547 def send(self, content, buffers=None): /opt/conda/envs/fastai/lib/python3.8/contextlib.py in __exit__(self, type, value, traceback) 118 if type is None: 119 try: --&gt; 120 next(self.gen) 121 except StopIteration: 122 return False /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in hold_trait_notifications(self) 1212 for changes in cache.values(): 1213 for change in changes: -&gt; 1214 self.notify_change(change) 1215 1216 def _notify_trait(self, name, old_value, new_value): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget_selection.py in _propagate_index(self, change) 233 self.label = label 234 if self.value is not value: --&gt; 235 self.value = value 236 237 @validate(&#39;value&#39;) /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in __set__(self, obj, value) 602 raise TraitError(&#39;The &#34;%s&#34; trait is read-only.&#39; % self.name) 603 else: --&gt; 604 self.set(obj, value) 605 606 def _validate(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in set(self, obj, value) 591 # we explicitly compare silent to True just in case the equality 592 # comparison above returns something other than True/False --&gt; 593 obj._notify_trait(self.name, old_value, new_value) 594 595 def __set__(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_trait(self, name, old_value, new_value) 1215 1216 def _notify_trait(self, name, old_value, new_value): -&gt; 1217 self.notify_change(Bunch( 1218 name=name, 1219 old=old_value, /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in on_change_ds(self, change) 88 def on_change_ds(self, change=None): 89 info = L(o for o in self.iwis[self.dd_ds.index] if o[1]==self.dd_cats.value) &gt; 90 self.iw.set_fns(info.sorted(2, reverse=True).itemgot(0)) /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in set_fns(self, fns) 51 def set_fns(self, fns): 52 self.fns = L(fns)[:self.max_n] &gt; 53 ims = parallel(_open_thumb, self.fns, h=self.height, w=self.width, progress=False, 54 n_workers=min(len(self.fns)//10,defaults.cpus)) 55 self.widget.children = [VBox([widget(im, height=f&#39;{self.height}px&#39;), Dropdown( /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py in parallel(f, items, n_workers, total, progress, pause, threadpool, timeout, chunksize, *args, **kwargs) 104 if total is None: total = len(items) 105 r = progress_bar(r, total=total, leave=False) --&gt; 106 return L(r) 107 108 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __call__(cls, x, *args, **kwargs) 95 def __call__(cls, x=None, *args, **kwargs): 96 if not args and not kwargs and x is not None and isinstance(x,cls): return x &gt; 97 return super().__call__(x, *args, **kwargs) 98 99 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __init__(self, items, use_list, match, *rest) 103 def __init__(self, items=None, *rest, use_list=False, match=None): 104 if (use_list is not None) or not is_array(items): --&gt; 105 items = listify(items, *rest, use_list=use_list, match=match) 106 super().__init__(items) 107 /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/basics.py in listify(o, use_list, match, *rest) 54 elif isinstance(o, list): res = o 55 elif isinstance(o, str) or is_array(o): res = [o] &gt; 56 elif is_iter(o): res = list(o) 57 else: res = [o] 58 if match is not None: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py in _chain_from_iterable_of_lists(iterable) 482 careful not to keep references to yielded objects. 483 &#34;&#34;&#34; --&gt; 484 for element in iterable: 485 element.reverse() 486 while element: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result_iterator() 609 # Careful not to keep a reference to the popped future 610 if timeout is None: --&gt; 611 yield fs.pop().result() 612 else: 613 yield fs.pop().result(end_time - time.monotonic()) /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result(self, timeout) 430 raise CancelledError() 431 elif self._state == FINISHED: --&gt; 432 return self.__get_result() 433 434 self._condition.wait(timeout) /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in __get_result(self) 386 def __get_result(self): 387 if self._exception: --&gt; 388 raise self._exception 389 else: 390 return self._result FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000130.jpg&#39; . _RemoteTraceback Traceback (most recent call last) _RemoteTraceback: &#34;&#34;&#34; Traceback (most recent call last): File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 239, in _process_worker r = call_item.fn(*call_item.args, **call_item.kwargs) File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in _process_chunk return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py&#34;, line 198, in &lt;listcomp&gt; return [fn(*args) for args in chunk] File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py&#34;, line 54, in _call return g(item) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py&#34;, line 41, in _open_thumb def _open_thumb(fn, h, w): return Image.open(fn).to_thumb(h, w).convert(&#39;RGBA&#39;) File &#34;/opt/conda/envs/fastai/lib/python3.8/site-packages/PIL/Image.py&#34;, line 2891, in open fp = builtins.open(filename, &#34;rb&#34;) FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000114.jpg&#39; &#34;&#34;&#34; The above exception was the direct cause of the following exception: FileNotFoundError Traceback (most recent call last) /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in _handle_msg(self, msg) 674 if &#39;buffer_paths&#39; in data: 675 _put_buffers(state, data[&#39;buffer_paths&#39;], msg[&#39;buffers&#39;]) --&gt; 676 self.set_state(state) 677 678 # Handle a state request. /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in set_state(self, sync_data) 543 from_json = self.trait_metadata(name, &#39;from_json&#39;, 544 self._trait_from_json) --&gt; 545 self.set_trait(name, from_json(sync_data[name], self)) 546 547 def send(self, content, buffers=None): /opt/conda/envs/fastai/lib/python3.8/contextlib.py in __exit__(self, type, value, traceback) 118 if type is None: 119 try: --&gt; 120 next(self.gen) 121 except StopIteration: 122 return False /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in hold_trait_notifications(self) 1212 for changes in cache.values(): 1213 for change in changes: -&gt; 1214 self.notify_change(change) 1215 1216 def _notify_trait(self, name, old_value, new_value): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget_selection.py in _propagate_index(self, change) 233 self.label = label 234 if self.value is not value: --&gt; 235 self.value = value 236 237 @validate(&#39;value&#39;) /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in __set__(self, obj, value) 602 raise TraitError(&#39;The &#34;%s&#34; trait is read-only.&#39; % self.name) 603 else: --&gt; 604 self.set(obj, value) 605 606 def _validate(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in set(self, obj, value) 591 # we explicitly compare silent to True just in case the equality 592 # comparison above returns something other than True/False --&gt; 593 obj._notify_trait(self.name, old_value, new_value) 594 595 def __set__(self, obj, value): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_trait(self, name, old_value, new_value) 1215 1216 def _notify_trait(self, name, old_value, new_value): -&gt; 1217 self.notify_change(Bunch( 1218 name=name, 1219 old=old_value, /opt/conda/envs/fastai/lib/python3.8/site-packages/ipywidgets/widgets/widget.py in notify_change(self, change) 604 # Send new state to front-end 605 self.send_state(key=name) --&gt; 606 super(Widget, self).notify_change(change) 607 608 def __repr__(self): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in notify_change(self, change) 1225 def notify_change(self, change): 1226 &#34;&#34;&#34;Notify observers of a change event&#34;&#34;&#34; -&gt; 1227 return self._notify_observers(change) 1228 1229 def _notify_observers(self, event): /opt/conda/envs/fastai/lib/python3.8/site-packages/traitlets/traitlets.py in _notify_observers(self, event) 1262 c = getattr(self, c.name) 1263 -&gt; 1264 c(event) 1265 1266 def _add_notifiers(self, handler, name, type): /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in on_change_ds(self, change) 88 def on_change_ds(self, change=None): 89 info = L(o for o in self.iwis[self.dd_ds.index] if o[1]==self.dd_cats.value) &gt; 90 self.iw.set_fns(info.sorted(2, reverse=True).itemgot(0)) /opt/conda/envs/fastai/lib/python3.8/site-packages/fastai/vision/widgets.py in set_fns(self, fns) 51 def set_fns(self, fns): 52 self.fns = L(fns)[:self.max_n] &gt; 53 ims = parallel(_open_thumb, self.fns, h=self.height, w=self.width, progress=False, 54 n_workers=min(len(self.fns)//10,defaults.cpus)) 55 self.widget.children = [VBox([widget(im, height=f&#39;{self.height}px&#39;), Dropdown( /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/parallel.py in parallel(f, items, n_workers, total, progress, pause, threadpool, timeout, chunksize, *args, **kwargs) 104 if total is None: total = len(items) 105 r = progress_bar(r, total=total, leave=False) --&gt; 106 return L(r) 107 108 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __call__(cls, x, *args, **kwargs) 95 def __call__(cls, x=None, *args, **kwargs): 96 if not args and not kwargs and x is not None and isinstance(x,cls): return x &gt; 97 return super().__call__(x, *args, **kwargs) 98 99 # Cell /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/foundation.py in __init__(self, items, use_list, match, *rest) 103 def __init__(self, items=None, *rest, use_list=False, match=None): 104 if (use_list is not None) or not is_array(items): --&gt; 105 items = listify(items, *rest, use_list=use_list, match=match) 106 super().__init__(items) 107 /opt/conda/envs/fastai/lib/python3.8/site-packages/fastcore/basics.py in listify(o, use_list, match, *rest) 54 elif isinstance(o, list): res = o 55 elif isinstance(o, str) or is_array(o): res = [o] &gt; 56 elif is_iter(o): res = list(o) 57 else: res = [o] 58 if match is not None: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/process.py in _chain_from_iterable_of_lists(iterable) 482 careful not to keep references to yielded objects. 483 &#34;&#34;&#34; --&gt; 484 for element in iterable: 485 element.reverse() 486 while element: /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result_iterator() 609 # Careful not to keep a reference to the popped future 610 if timeout is None: --&gt; 611 yield fs.pop().result() 612 else: 613 yield fs.pop().result(end_time - time.monotonic()) /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in result(self, timeout) 437 raise CancelledError() 438 elif self._state == FINISHED: --&gt; 439 return self.__get_result() 440 else: 441 raise TimeoutError() /opt/conda/envs/fastai/lib/python3.8/concurrent/futures/_base.py in __get_result(self) 386 def __get_result(self): 387 if self._exception: --&gt; 388 raise self._exception 389 else: 390 return self._result FileNotFoundError: [Errno 2] No such file or directory: &#39;/notebooks/clean/beers/surly furious/00000114.jpg&#39; . cleaner.delete() . (#1) [3] . for idx in cleaner.delete(): cleaner.fns[idx].unlink() for idx,cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . epoch train_loss valid_loss error_rate time . 0 | 1.686379 | 1.762135 | 0.415730 | 00:06 | . epoch train_loss valid_loss error_rate time . 0 | 0.906717 | 0.784762 | 0.303371 | 00:06 | . 1 | 0.729652 | 0.448611 | 0.179775 | 00:06 | . 2 | 0.562944 | 0.448525 | 0.168539 | 00:06 | . 3 | 0.475745 | 0.460656 | 0.134831 | 00:06 | . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(6) . epoch train_loss valid_loss error_rate time . 0 | 1.800762 | 1.194014 | 0.348315 | 00:06 | . epoch train_loss valid_loss error_rate time . 0 | 1.023232 | 0.720998 | 0.314607 | 00:06 | . 1 | 0.817983 | 0.590241 | 0.258427 | 00:06 | . 2 | 0.653804 | 0.612431 | 0.224719 | 00:06 | . 3 | 0.517505 | 0.623251 | 0.235955 | 00:06 | . 4 | 0.433714 | 0.629279 | 0.224719 | 00:07 | . 5 | 0.375028 | 0.626378 | 0.224719 | 00:06 | . learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet34-333f7ec4.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet34-333f7ec4.pth . . epoch train_loss valid_loss error_rate time . 0 | 1.768545 | 1.465732 | 0.505618 | 00:08 | . epoch train_loss valid_loss error_rate time . 0 | 1.215360 | 0.709398 | 0.224719 | 00:08 | . 1 | 0.833171 | 0.528382 | 0.191011 | 00:07 | . 2 | 0.669039 | 0.562557 | 0.202247 | 00:09 | . 3 | 0.550987 | 0.575904 | 0.224719 | 00:08 | . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 1.796401 | 1.397780 | 0.505618 | 00:07 | . epoch train_loss valid_loss error_rate time . 0 | 0.864048 | 0.612680 | 0.269663 | 00:07 | . 1 | 0.696198 | 0.553208 | 0.191011 | 00:07 | . 2 | 0.609321 | 0.498915 | 0.168539 | 00:07 | . 3 | 0.535735 | 0.484320 | 0.157303 | 00:07 | . interp.plot_top_losses(5, nrows=1) . cleaner = ImageClassifierCleaner(learn) cleaner . Turning Your Model into an Online Application . Using the Model for Inference . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;images/grizzly.jpg&#39;) . (&#39;toppling goliath pseudo sue&#39;, tensor(6), tensor([2.2459e-03, 4.9390e-03, 1.4955e-02, 4.9468e-04, 8.0316e-03, 2.5601e-02, 9.4373e-01])) . learn_inf.dls.vocab . [&#39;bells two hearted&#39;, &#39;busch light&#39;, &#39;founders kentucky breakfast stout&#39;, &#39;surly furious&#39;, &#39;toppling goliath king sue&#39;, &#39;toppling goliath pompeii&#39;, &#39;toppling goliath pseudo sue&#39;] . Creating a Notebook App from the Model . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred.title()}; Probability: {100*probs[pred_idx]:.01f}%&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your bear!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . Turning Your Notebook into a Real App . Deploying your app . How to Avoid Disaster . Unforeseen Consequences and Feedback Loops . Get Writing! . Questionnaire . Provide an example of where the bear classification model might work poorly in production, due to structural or style differences in the training data. | Where do text models currently have a major deficiency? | What are possible negative societal implications of text generation models? | In situations where a model might make mistakes, and those mistakes could be harmful, what is a good alternative to automating a process? | What kind of tabular data is deep learning particularly good at? | What&#39;s a key downside of directly using a deep learning model for recommendation systems? | What are the steps of the Drivetrain Approach? | How do the steps of the Drivetrain Approach map to a recommendation system? | Create an image recognition model using data you curate, and deploy it on the web. | What is DataLoaders? | What four things do we need to tell fastai to create DataLoaders? | What does the splitter parameter to DataBlock do? | How do we ensure a random split always gives the same validation set? | What letters are often used to signify the independent and dependent variables? | What&#39;s the difference between the crop, pad, and squish resize approaches? When might you choose one over the others? | What is data augmentation? Why is it needed? | What is the difference between item_tfms and batch_tfms? | What is a confusion matrix? | What does export save? | What is it called when we use a model for getting predictions, instead of training? | What are IPython widgets? | When might you want to use CPU for deployment? When might GPU be better? | What are the downsides of deploying your app to a server, instead of to a client (or edge) device such as a phone or PC? | What are three examples of problems that could occur when rolling out a bear warning system in practice? | What is &quot;out-of-domain data&quot;? | What is &quot;domain shift&quot;? | What are the three steps in the deployment process? | Further Research . Consider how the Drivetrain Approach maps to a project or problem you&#39;re interested in. | When might it be best to avoid certain types of data augmentation? | For a project you&#39;re interested in applying deep learning to, consider the thought experiment &quot;What would happen if it went really, really well?&quot; | Start a blog, and write your first blog post. For instance, write about what you think deep learning might be useful for in a domain you&#39;re interested in. |",
            "url": "https://mattlichti.github.io/blog/jupyter/2021/02/22/old-beer-detector.html",
            "relUrl": "/jupyter/2021/02/22/old-beer-detector.html",
            "date": " • Feb 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Disc Golf Disc Classifier",
            "content": "Live App is running at https://udisc.mattlichti.com/ . All the data was submitted through the Udisc Android &amp; iPhone apps https://udisc.com/ . The code is based on lessons 1 &amp; 2 of fastai course 3 https://course.fast.ai/ . %reload_ext autoreload %autoreload 2 %matplotlib inline from fastai.vision import * from fastai.metrics import error_rate import urllib.request as req import pandas as pd import os import numpy as np . Step 1: Cleaning the Data and loading it into the fastai ImageDataBunch class . df = pd.read_csv(&#39;transformed_97_discs.csv&#39;, index_col=0) . df = df.loc[df.downloaded] df = df.loc[df[&#39;size&#39;]&gt;=25000] df.shape . (63815, 13) . np.random.seed(42) df = df[df[&#39;discName&#39;].isin([&#39;Leopard&#39;, &#39;Buzzz&#39;, &#39;Firebird&#39;])] df = df.sample(3000) df.groupby(&#39;discName&#39;).count() . manufacturerName image plastic created type speed size downloaded disc_label plastic_label folder path . discName . Buzzz 1168 | 1168 | 967 | 1168 | 1158 | 839 | 1168 | 1168 | 1168 | 1168 | 1168 | 1168 | . Firebird 786 | 786 | 755 | 786 | 778 | 715 | 786 | 786 | 786 | 786 | 786 | 786 | . Leopard 1046 | 1046 | 834 | 1046 | 1040 | 1006 | 1046 | 1046 | 1046 | 1046 | 1046 | 1046 | . df.index = df.path df = df.loc[:, [&#39;disc_label&#39;]] df.to_csv(&#39;disc_images/labels.csv&#39;) . np.random.seed(42) path = Path(&#39;/home/jupyter/disc_classifier/disc_images&#39;) data = ImageDataBunch.from_csv(path, valid_pct=.1, ds_tfms=get_transforms(do_flip=False), size=224, num_workers=4).normalize(imagenet_stats) . data.classes, len(data.train_ds), len(data.valid_ds) . ([&#39;Discraft Buzzz&#39;, &#39;Innova Firebird&#39;, &#39;Innova Leopard&#39;], 2700, 300) . data.show_batch() . Step 2: Training the Convolutional Neural Net. . We use a 50 layer ResNet that has been pretrained on ImageNet. https://en.wikipedia.org/wiki/Residual_neural_network . learn = cnn_learner(data, models.resnet50, metrics=error_rate) . learn.lr_find() learn.recorder.plot() . LR Finder is complete, type {learner_name}.recorder.plot() to see the graph. . learn.fit_one_cycle(4, max_lr=3*1e-3) . Total time: 03:27 epoch train_loss valid_loss error_rate time . 0 0.801391 0.698489 0.223333 00:53 . 1 0.523101 0.402900 0.143333 00:51 . 2 0.348445 0.353320 0.160000 00:51 . 3 0.239959 0.340474 0.140000 00:51 . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; learn.save(&#39;3_discs-1-4&#39;) . Step 3: Interpreting the Results . interp = ClassificationInterpretation.from_learner(learn) . interp.plot_confusion_matrix(figsize=(5,5)) . interp.plot_top_losses(16, figsize=(25,25), heatmap=False) . Step 4 (optional): Train more layers of the neural net to improve performance . learn.unfreeze() learn.lr_find() learn.recorder.plot() . LR Finder is complete, type {learner_name}.recorder.plot() to see the graph. . learn.fit_one_cycle(3, max_lr=slice(5*1e-5,3*1e-4)) . Total time: 02:34 epoch train_loss valid_loss error_rate time . 0 0.179046 0.387953 0.136667 00:52 . 1 0.142624 0.331104 0.103333 00:51 . 2 0.090960 0.257891 0.096667 00:50 . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; learn.save(&#39;3_discs-2-3&#39;) . interp = ClassificationInterpretation.from_learner(learn) . interp.plot_confusion_matrix(figsize=(5,5)) . Step 5: Putting in to production . defaults.device = torch.device(&#39;cpu&#39;) . path = Path(&#39;/home/jupyter/disc_classifier/disc_images&#39;) data = ImageDataBunch.from_csv(path, valid_pct=.1, ds_tfms=get_transforms(flip_vert=True), size=224, num_workers=4).normalize(imagenet_stats) learn = cnn_learner(data, models.resnet50, metrics=error_rate) . . path = Path(&#39;/home/jupyter/disc_classifier/&#39;) leopard = open_image(path/&#39;leopard.jpeg&#39;) . leopard = open_image(path/&#39;leopard.jpeg&#39;) . leopard . pred_class,pred_idx,outputs = learn.predict(leopard) . pred_class . Category Innova Leopard . outputs . tensor([1.3064e-05, 7.1869e-04, 9.9927e-01]) . data.classes . [&#39;Discraft Buzzz&#39;, &#39;Innova Firebird&#39;, &#39;Innova Leopard&#39;] . learn.export(&#39;3discs.pkl&#39;) . def predict_disc(learn, img): pred_class,pred_idx,outputs = learn.predict(img) idx = np.argsort(-outputs)[0] if outputs[idx].item()&gt;.75: output = &#39;We think your disc is: &#39; + str(pred_class) else: output = &quot;Sorry, we aren&#39;t sure what kind of disc that is.&quot; output += &#39; nTop disc mold probabilities for your disc: n&#39; for idx in np.argsort(-outputs)[:10]: if outputs[idx].item()&gt;.00005: output += str(data.classes[idx]) + &#39;: &#39; output += str(round(outputs[idx].item()*100,2)) + &#39;%&#39; + &#39; n&#39; return(output) . print(predict_disc(learn, leopard)) . We think your disc is: Innova Leopard Top disc mold probabilities for your disc: Innova Leopard: 99.93% Innova Firebird: 0.07% . firebird = open_image(path/&#39;firebird.jpg&#39;) . firebird . print(predict_disc(learn, firebird)) . We think your disc is: Innova Leopard Top disc mold probabilities for your disc: Innova Leopard: 97.34% Innova Firebird: 1.98% Discraft Buzzz: 0.68% . &lt;/div&gt; .",
            "url": "https://mattlichti.github.io/blog/jupyter/2019/03/27/disc-classifier.html",
            "relUrl": "/jupyter/2019/03/27/disc-classifier.html",
            "date": " • Mar 27, 2019"
        }
        
    
  
    
        ,"post3": {
            "title": "How to get loans funded on kiva",
            "content": "I built a predictive model to analyze which features make microfinance loans on kiva.org more likely to get funded. This post was originally written in 2015 and was reformatted for my fastpages blog in 2021. All of the code is available on github . . Motivation . There are over 2 million small time lenders on kiva who have funded over 880,000 microfinance loans totaling $712 million since 2005. The loans are originally made by 296 different microfinance organizations in 85 countries who use kiva to raise money to backfill some of their loans. Lenders can view the loans on the website and lend as little as $25 to any of the borrowers they chose. . Since January 2012, kiva has usually had a 30 day expiration policy. If a loan is not fully funded in that time, the lenders are refunded and the microfinance organization does not receive any money. This is similar to the funding model used on kickstarter where projects do not receive any money unless they are fully funded. Because of the risk of loan expiration, it is important for the microfinance organizations to understand the characteristics that make loans more likely to get funded. The analysis could also help kiva.org increase the total number of loans getting funded, which would help more struggling entrepreneurs around the globe get the capital they need to build their businesses . Data . Kiva makes their loan data available through their api. They also periodically make downloadable snapshots of the data. I most recently used the May 18 2015 json snapshot for this analysis. The loan data is in a 1 GB zip file that is 5 GB when unzipped. . Pipeline . data_pipeline.py is used for processing the raw kiva loan data. It extracts the relevant data, performs the feature engineering, and then stores it all in a postgres SQL database. To run the pipeline, unzip the loans folder containing around 1800 json files that each have the data from 500 loans. Then setup a postgres database and run pipeline.py in the terminal the loans folder location and sql information as command line arguments. The most important part of the process is feature engineering. The features include anything that a potential borrower sees when viewing a loan on kiva org that they can use to decide whether or not to loan to a particular individual. . Feature Engineering . The most important part of the process is feature engineering. The features include anything that a potential borrower sees when viewing a loan on kiva org that they can use to decide whether or not to loan to a particular individual. A typical view of a loan from the kiva website is pictured below with some of the important features highlighted. . . Continuous features . loan amount | repayment term (anywhere from 4 months to several years) | group size (loans can be for 1 person or a group of people) | . Categorical features . gender | country - currently 84 countries | sector - 15 categories like transportation or agriculture | activity - 150 categories like “rickshaw” or “cattle” | repayment interval - loans payments can be monthly, lump sum at the end, or irregular | themes - searchable attributes like “green”, “fair trade”, “conflict zones”, etc. | currency loss - whether the lender is liable for losses due to currency fluctuations | anonymous - whether the borrower has their name and photo on the website or chooses to remain anonymous. | . Transforming the text into features . I used the one sentence description of how the loan will be used to engineer features out of the most commonly used terms. The length of this text as well as the length of the larger description text were also useful features. . Competing loans . In addition to the features that impact demand for particular loans, the supply of loans on the site can effect the chances of each loan getting funded. I used SQL to calculate the number of other loans on kiva at the time each loan was posted by comparing the timestamp of when each loan was posted to the timestamps for when other loans were posted and funded or expired. . . When there are few loans on the site, almost all of the loans get funded. When there is more competition, lenders have more options each loan has a higher chance of expiring. In the future, it might be useful to look at the total value of the loans currently fundraising and how far along they are in their fundraising, not just the number of loans. It might also be useful to look at attributes of those loans. For example, if there are a lot of loans currently fundraising from the same country or economic sector as the loan being posted, it may lower the chance of that loan getting funded. . Modeling . build_model.py is used to train the model, predict which loans have a higher risk of expiring, and determine which features are most important in predicting loan success. The model converts the categorical features into boolean dummy variables, and tokenizes, lemmatizes, and performs TF-IDF on the text. I used a random forest model. The classes were unbalanced with a much higher number of funded loans than expired loans, so I heavily weighted the expired loans in order to increase recall of expired loans at the expense of precision. The model can output a confusion matrix and a list of feature importance which could be used as recommendations on how to improve their odds of getting their loans funded. . Weighted Random Forest . I used a random forest model. The classes were unbalanced with a much higher number of funded loans than expired loans, so I heavily weighted the expired loans in order to increase recall of expired loans at the expense of precision. I also tried logistic regression and SVM but they have not performed quite as well. . Model Tuning . I had to tune the model quite a bit to avoid overfitting. I used a grid search to determine optimal values for the weight of the unbalanced class, minimum number of samples to split each node, and the minimum number of samples on each newly created leaf. I used cross validation to determine which set of parameter values had the best combination of recall and precision on the test sets. . Out of Sample Error . The model will still be somewhat biased since the test sets were from the same time period as the training sets and may net work as well data from a future time period. Because of this, I also tried training the model on one time period (May - November 2014) and testing it on a later time period (January - March 2015). The one month gap is necessary because someone predicting current loans would not know which loans posted in the last month will expire since they have 30 days to get funded. The model does not perform as well with different time periods which shows there are time related variables that aren’t captured by the model. . Running the model . run_model.py is used to load the relevant data from the postgres sql database and run the model on that data. It can be run from the command line like data_pipeline.py. . Plotting . plots.py is used to make plots of the feature importance of the most important features in the random forest model, as well as plot the expiration rate based on a variety of features and the expiration rate over time. . Results . . Lenders on kiva show a strong preference for loans with a shorter repayment term as well as loans to women. Loans for larger amounts of money are not surprisingly more difficult to fund since they require more lenders to fully fund. Lenders also prefer lending to certain countries, especially African countries and countries with fewer loans available on kiva. Loans to countries with lots of loans available like El Salvador (SV) and Colombia (CO) are at greater risk for loan expiration. Lenders also have strong preferences for different loan uses with loans for personal housing much more likely to expire than loans for education or starting a business. .",
            "url": "https://mattlichti.github.io/blog/markdown/2015/06/01/kiva-funding-model.html",
            "relUrl": "/markdown/2015/06/01/kiva-funding-model.html",
            "date": " • Jun 1, 2015"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "2015 Data Science Website . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mattlichti.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mattlichti.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}